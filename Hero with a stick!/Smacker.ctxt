#BlueJ class context
comment0.target=Smacker
comment0.text=\r\n\ Write\ a\ description\ of\ class\ Smacker\ here.\r\n\ \r\n\ @author\ (your\ name)\ \r\n\ @version\ (a\ version\ number\ or\ a\ date)\r\n
comment1.params=
comment1.target=Smacker()
comment1.text=\r\n\ Standart\ Konstruktor.\r\n\ Das\ Bild\ wird\ gesesetz\ und\ die\ anderen\ Variablen.\r\n
comment2.params=
comment2.target=void\ act()
comment2.text=\r\n\ Act\ -\ do\ whatever\ the\ Smacker\ wants\ to\ do.\ This\ method\ is\ called\ whenever\r\n\ the\ 'Act'\ or\ 'Run'\ button\ gets\ pressed\ in\ the\ environment.\r\n
comment3.params=
comment3.target=void\ movement()
comment3.text=\r\n\ Zuerst\ wird\ getestet\ ob\ ein\ bewegungstaste\ gedr\u00FCckt\ wird.\r\n\ Falls\ nicht\ wird\ nicht\ bewegt.\r\n\ \r\n\ Danach\ wird\ jede\ Taste\ durchgetestet\ und\ der\ Array\ lastMove\ entsprechen\ gesetzt.\r\n\ \r\n\ lastMove[0]\:\ Nach\ Rechts\ bewegen.\r\n\ lastMove[1]\:\ Nach\ Links\ bewegen.\r\n\ lastMove[2]\:\ Nach\ Unten\ bewegen.\r\n\ lastMove[3]\:\ Nach\ Oben\ bewegen.\r\n\ \r\n\ Falls\ ein\ Stick\ aktiv\ ist\ wird\ dieser\ auch\ bewegt.\r\n
comment4.params=
comment4.target=void\ smack()
comment4.text=\r\n\ Falls\ man\ keinen\ Stick\ hat\ und\ space\ dr\u00FCckt\ erzeugt\ man\ einen\r\n\ Stick\ um\ Gegner\ zu\ smacken.\r\n\ \r\n\ Danach\ wird\ getestet\ ob\ es\ einen\ aktiven\ lastMove[]\ gibt.\r\n\ Falls\ gleichzeitig\ nach\ Links\ und\ Rechts\ bewegt\ wird.\r\n\ Wird\ nach\ Rechts\ geschlagen.\r\n\ \r\n\ Falls\ gleichzeitig\ nach\ Unten\ und\ Oben\ bewegt\ wird\ nach\ Oben\ geschlagen.\r\n\ \r\n\ Danach\ werden\ die\ Entsprechende\ Rotation\ und\ Position\ f\u00FCr\ die\r\n\ 8\ unterschidlichen\ Movements\ erzeugt.\r\n\ \r\n\ Danach\ wird\ der\ Stick\ erzeugt\ und\ die\ hasStick\ variable\ true\ gesetzt.\r\n
comment5.params=dmg
comment5.target=void\ loselife(int)
comment5.text=\r\n\ Mit\ dieser\ Methode\ kann\ das\ Leben\ des\ Smacker\ reduziert\ werden\ und\r\n\ mit\ der\ showlife\ Methode\ auf\ dem\ Screen\ angepasst\ werden.\r\n
numComments=6
